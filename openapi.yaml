openapi: 3.0.3
info:
  title: FFK Backend API
  version: 1.0.0
  description: |
    OpenAPI specification derived from REQUIREMENTS.md.
    Notes:
    - All query endpoints support pagination and sorting via standard parameters.
    - Roles and status values are constrained to the enumerations below.
servers:
  - url: /api
tags:
  - name: Auth
    description: Authentication APIs
  - name: Users
    description: User management APIs
paths:
  /auth/login:
    post:
      tags: [Auth]
      summary: Login
      description: Authenticate a user with email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/register:
    post:
      tags: [Auth]
      summary: Register
      description: Register a new user. Defaults may apply for role/status (e.g., customer/active) depending on implementation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    get:
      tags: [Users]
      summary: List all users
      description: Returns a paginated list of users.
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: Page of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageUser'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags: [Users]
      summary: Create a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/search:
    get:
      tags: [Users]
      summary: Search users by keyword
      description: Search by name or email.
      parameters:
        - name: q
          in: query
          required: true
          description: Keyword to search (matches name or email)
          schema:
            type: string
            minLength: 1
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: Page of users matching the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageUser'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      tags: [Users]
      summary: Find a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags: [Users]
      summary: Update a user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags: [Users]
      summary: Delete a user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Deleted successfully
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  parameters:
    Page:
      name: page
      in: query
      description: Zero-based page index
      schema:
        type: integer
        minimum: 0
        default: 0
    Size:
      name: size
      in: query
      description: The size of the page to be returned
      schema:
        type: integer
        minimum: 1
        maximum: 200
        default: 20
    Sort:
      name: sort
      in: query
      description: |
        Sorting criteria in the format: property,(asc|desc). Example: name,asc
        Multiple sort parameters are supported and will be applied in order.
      schema:
        type: array
        items:
          type: string
      style: form
      explode: true
  schemas:
    UserRole:
      type: string
      enum: [admin, customer, staff_account, staff_sale, staff_inventory]
    UserStatus:
      type: string
      enum: [active, inactive]
    User:
      type: object
      required: [id, name, email, role, status]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
        email:
          type: string
          format: email
        role:
          $ref: '#/components/schemas/UserRole'
        status:
          $ref: '#/components/schemas/UserStatus'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UserCreate:
      type: object
      required: [name, email, password, role, status]
      properties:
        name:
          type: string
          minLength: 1
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          description: At least 8 characters
        role:
          $ref: '#/components/schemas/UserRole'
        status:
          $ref: '#/components/schemas/UserStatus'
    UserUpdate:
      type: object
      description: All fields optional; only provided fields will be updated.
      properties:
        name:
          type: string
          minLength: 1
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        role:
          $ref: '#/components/schemas/UserRole'
        status:
          $ref: '#/components/schemas/UserStatus'
      additionalProperties: false
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
    LoginResponse:
      type: object
      required: [accessToken]
      properties:
        accessToken:
          type: string
          description: Bearer access token (e.g., JWT)
        tokenType:
          type: string
          default: Bearer
        expiresIn:
          type: integer
          description: Seconds until the access token expires
    RegisterRequest:
      type: object
      required: [name, email, password]
      properties:
        name:
          type: string
          minLength: 1
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          description: At least 8 characters
    PageMetadata:
      type: object
      properties:
        page:
          type: integer
          minimum: 0
        size:
          type: integer
          minimum: 1
        totalElements:
          type: integer
          minimum: 0
        totalPages:
          type: integer
          minimum: 0
        sort:
          type: array
          items:
            type: string
    PageUser:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/User'
        metadata:
          $ref: '#/components/schemas/PageMetadata'
      required: [content, metadata]
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: true
      required: [message]